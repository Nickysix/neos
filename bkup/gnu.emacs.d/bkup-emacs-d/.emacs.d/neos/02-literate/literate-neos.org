




;; * ENVIRONMENT SETTINGS     * .........................................................................

(cua-mode 1)

(tool-bar-mode -1)

(scroll-bar-mode -1)

(toggle-frame-maximized)

(show-paren-mode 1)

(electric-pair-mode 1)

(global-visual-line-mode t)

(global-font-lock-mode 1)

(global-linum-mode 1)

(setq linum-format "  %4d  ")

(setq pop-up-swindows nil)

(setq-default vc-display-status nil)

(setq-default x-underline-at-descent-line t)

(setq-default enable-recursive-minibuffers t)

(setq-default cursor-type '(bar . 1))

(setq-default word-wrap t)

(setq-default fill-column 200)

(setq-default apropos-do-all t)

(setq-default avy-style 'at-full)

(setq-default blink-matching-delay 0.5)

(setq-default blink-matching-paren 'jump-offscreen)

(setq-default echo-keystrokes 0.1)

(setq-default sentence-end-double-space nil)

(setq-default coding-system-for-read 'utf-8 )

(setq-default coding-system-for-write 'utf-8 )

(setq-default indent-tabs-mode nil)

(setq-default browse-url-browser-function 'browse-url-generic)

(setq-default browse-url-generic-program "google-chrome-stable")

(setq default-major-mode 'text-mode)

(setq-default auto-fill-function 'do-auto-fill)

(defalias 'yes-or-no-p 'y-or-n-p)

(add-hook 'before-save-hook 'delete-trailing-whitespace)



;; * PACKAGE-MODE             * .........................................................................

(require 'package)

(setq package-enable-at-startup nil)

(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("SC"  . "http://joseito.republika.pl/sunrise-commander/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(add-to-list 'package-archives
           '("melpa-stable" . "http://stable.melpa.org/packages/") t)

(package-initialize)

(package-refresh-contents)

;; * LOAD-PATH                * .........................................................................

(push "~/.emacs.d/neos/local" load-path)
(push "~/.emacs.d/neos/local/sly" load-path)

;; * REQUIRE                  * .........................................................................

(require 'font-lock+)
(require 'lacarte)
(require 'sly)

;; * QUELPA                   * -------------------------------------------------------------------------|

(if (require 'quelpa nil t)
    (quelpa-self-upgrade)
  (with-temp-buffer
    (url-insert-file-contents
     "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))

(quelpa
 '(quelpa-use-package
   :fetcher github
   :repo "quelpa/quelpa-use-package"
   :stable nil))
(require 'quelpa-use-package)

;; * USE-PACKAGE              * -------------------------------------------------------------------------|

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; * USEFULL-LIBRARIES        * -------------------------------------------------------------------------|

(use-package crux
    :ensure t
    :bind (("C-a" . crux-move-beginning-of-line)))

(use-package async
  :ensure t
  :commands (async-start))

(use-package cl-lib
  :ensure t)

(use-package dash
  :ensure t)

(use-package s
  :ensure t)

(use-package f
  :ensure t)

;; * DIMINISH                 * .........................................................................

(use-package diminish
  :ensure t
  :demand t
  :diminish (visual-line-mode . "ω")
  :diminish hs-minor-mode
  :diminish abbrev-mode
  :diminish auto-fill-function
  :diminish subword-mode)


;; * ORG-MODE                 * -------------------------------------------------------------------------|

(use-package org
  :ensure org-plus-contrib
  :init
  (setq org-directory "~/.emacs.d/neos/org"))

(use-package org-download
  :ensure t)

;; (use-package org-bullets
;;     :ensure t
;;     :config
;;     (setq org-bullets-bullet-list '("∙"))
;;     (add-hook 'org-mode-hook 'org-bullets-mode))

(use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda ()
                               (org-bullets-mode 1))))

(use-package deft
  :ensure t
  :init
  (setq deft-directory "~/.emacs.d/neos/org")
  (setq deft-recursive t)
  (setq deft-use-filename-as-title t)
  (setq deft-default-extension "org")
  (setq deft-extensions '("org"))
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")
                                 (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)
  (setq deft-org-mode-title-prefix t))


;; * EVIL-MODE                * -------------------------------------------------------------------------|

;; (use-package evil-escape
;;   :ensure t
;;   :init
;;   (setq-default evil-escape-delay 0.2)
;;   (setq-default evil-escape-key-sequence "jj")
;;   :config
;;   (evil-escape-mode -1))

;; (use-package evil-leader
;;   :ensure t
;;   :config
;;   (global-evil-leader-mode nil)
;;   ;; more config goes here
;;   )

;; ;; (evil-leader/set-key-for-mode 'emacs-lisp-mode "b" 'byte-compile-file)

;; (evil-leader/set-key
;;   "e" 'find-file
;;   "b" 'switch-to-buffer
;;   "k" 'kill-buffer)

(use-package evil
  :ensure t
  :init
  (progn
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil))
  :config
  (evil-mode -1))

;; (use-package evil-collection
;;   :load-path "~/.emacs.d/neos/local/evil-collection/"
;;   :after evil
;;   :config
;;   (evil-collection-init))

;; (use-package evil-collection
;;   :custom (evil-collection-ivy-setu t)g
;;   :init (evil-collection-init))

;; (use-package evil-collection
;;   :custom (evil-collection-company-setup t)
;;   :init (evil-collection-init))

;; (use-package evil-collection
;;   :custom (evil-collection-outline-setup t)
;;   :init (evil-collection-init))

(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(use-package evil-vimish-fold
  :ensure t
  :config
  (evil-vimish-fold-mode -1))

;; * AVY-MODE                 * -------------------------------------------------------------------------|

(use-package avy
  :ensure t
  :config
  (global-set-key (kbd "M-g e") 'avy-goto-word-0)
  (global-set-key (kbd "M-g f") 'avy-goto-line)
  (global-set-key (kbd "C-:") 'avy-goto-char)
  (global-set-key (kbd "C-'") 'avy-goto-char-2)
  )

;; * GENERAL-MODE             * -------------------------------------------------------------------------|

;; (use-package general
;;   :ensure t
;;   :config (general-define-key
;;   :states '(normal visual insert emacs)
;;   :prefix "SPC"
;;   :non-normal-prefix "M-SPC"
;;   ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
;;   "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
;;   "SPC" '(helm-M-x :which-key "M-x")
;;   "pf"  '(helm-find-file :which-key "find files")
;;   ;; Buffers
;;   "bb"  '(helm-buffers-list :which-key "buffers list")
;;   ;; Window
;;   "wl"  '(windmove-right :which-key "move right")
;;   "wh"  '(windmove-left :which-key "move left")
;;   "wk"  '(windmove-up :which-key "move up")
;;   "wj"  '(windmove-down :which-key "move bottom")
;;   "w/"  '(split-window-right :which-key "split right")
;;   "w-"  '(split-window-below :which-key "split bottom")
;;   "wx"  '(delete-window :which-key "delete window")
;;   ;; Others
;;   "at"  '(ansi-term :which-key "open terminal")
;; ))

(use-package general
  :ensure t
  :config
  (general-define-key
  :prefix "C-c"
  ;; bind "C-c a" to 'org-agenda
  "a" 'org-agenda
  "b" 'counsel-bookmark
  "c" 'outshine-cycle-buffer))


;; * HYDRA-MODE               * -------------------------------------------------------------------------|

;; * HYPERBOLE-MODE           * -------------------------------------------------------------------------

;; * ENGINE-MODE              * -------------------------------------------------------------------------

;; * EMACS-LISP               * -------------------------------------------------------------------------

;; * COMMON-LISP              * -------------------------------------------------------------------------|

;; * LSP-MODE                 * -------------------------------------------------------------------------|

(use-package lsp-mode
  :ensure t
  :init
  (add-hook 'prog-major-mode #'lsp-prog-major-mode-enable))

;; * LSP-UI                   * -------------------------------------------------------------------------|

(use-package lsp-ui
  :ensure t
  :init
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

;; * COMPANY-MODE             * -------------------------------------------------------------------------|

;; (use-package company
;;   :ensure t
;;   :bind (:map company-active-map
;;          ("C-n" . company-select-next)
;;          ("C-p" . company-select-previous))
;;   :init
;;   (global-company-mode)
;;   :config
;;   (setq company-idle-delay 0) ; Delay to complete
;;   (setq company-minimum-prefix-length 1)
;;   (setq company-selection-wrap-around t)) ; Loops around suggestions

(use-package company
:ensure t
:init
(setq company-minimum-prefix-length 3)
(setq company-auto-complete nil)
(setq company-idle-delay 0)
(setq company-require-match 'never)
(setq company-frontends
  '(company-pseudo-tooltip-unless-just-one-frontend
    company-preview-frontend
    company-echo-metadata-frontend))
(setq tab-always-indent 'complete)
(defvar completion-at-point-functions-saved nil)
:config
(global-company-mode 1)
(define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
(define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
(define-key company-active-map (kbd "S-TAB") 'company-select-previous)
(define-key company-active-map (kbd "<backtab>") 'company-select-previous)
(define-key company-mode-map [remap indent-for-tab-command] 'company-indent-for-tab-command)
(defun company-indent-for-tab-command (&optional arg)
  (interactive "P")
  (let ((completion-at-point-functions-saved completion-at-point-functions)
    	(completion-at-point-functions '(company-complete-common-wrapper)))
	(indent-for-tab-command arg)))

(defun company-complete-common-wrapper ()
	(let ((completion-at-point-functions completion-at-point-functions-saved))
	(company-complete-common))))

(use-package company-lsp
:ensure t
:init
(push 'company-lsp company-backends))


;; * QUICKREF-MODE            * -------------------------------------------------------------------------|

(use-package quickref
  :ensure t
  :init
  (setq quickref-command-prefix (kbd "C-M-q"))
  :config
  (quickref-global-mode +1))

;; * OUTSHINE-MODE            * -------------------------------------------------------------------------|

(use-package outshine
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook 'outshine-mode)
  (add-hook 'prog-mode-hook 'outline-minor-mode))

;; * OUTLINE-MINOR-FACES      * -------------------------------------------------------------------------|

(use-package outline-minor-faces
  :ensure t
  :after outline
  :config (add-hook 'outline-minor-mode-hook
                    'outline-minor-faces-add-font-lock-keywords))

;; * OUTLINE-IVY              * -------------------------------------------------------------------------|


;; requires dash-functional pkg


;; * THEMES-SETTINGS          * -------------------------------------------------------------------------|


(use-package all-the-icons
  :ensure t)

(use-package mode-icons
  :ensure t
  :config
  (mode-icons-mode))

(use-package powerline
 :ensure t
 :config (powerline-center-evil-theme))

;; (use-package jazz-theme
;;   :ensure t
;;   :config
;;   (load-theme 'jazz t))

;; (use-package gruvbox-theme
;;   :ensure t
;;   :config
;;   (load-theme 'gruvbox t))

(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t)
  (doom-themes-neotree-config)
  (doom-themes-org-config))

(use-package doom-modeline
  :ensure t
  :init
  (progn
    (setq doom-modeline-height 25)
    (setq doom-modeline-bar-width 3)
    (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
    (setq doom-modeline-icon t)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-checker-simple-format t)
    (setq doom-modeline-persp-name t)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-env-version t))
  :config (doom-modeline-mode 1))

(use-package hide-mode-line
  :ensure t
  :config
  (add-hook 'neotree-mode-hook #'hide-mode-line-mode))


;; * GLOBAL-SET-KEY           * -------------------------------------------------------------------------|

(global-set-key [f2] 'eval-buffer)

(global-set-key [f1] 'goto-line)

(global-set-key [f7] 'save-buffer)

(global-set-key [f9] 'split-window-vertically)

(global-set-key [(shift f9)] 'split-window-horizontally)

(global-set-key [f10] 'delete-other-windows)

(global-set-key [(shift f10)] 'lacarte-execute-menu-command)

(global-set-key [(shift f12)] 'dot-emacs)

(global-set-key [M-left] 'windmove-left)          ; move to left window

(global-set-key [M-right] 'windmove-right)        ; move to right window

(global-set-key [M-up] 'windmove-up)              ; move to upper window

(global-set-key [M-down] 'windmove-down)          ; move to lower window


;; * IVY-SWIPER-COUNSEL       * -------------------------------------------------------------------------|


(use-package smex
  :ensure t)

(use-package counsel
  :ensure t)


(use-package ivy
  :demand
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         :map ivy-minibuffer-map
         ("TAB" . ivy-next-line)
         ("RET" . ivy-alt-done)
         :map ivy-switch-buffer-map
         ("C-d" . ivy-switch-buffer-kill))
  :init
  (setq ivy-initial-inputs-alist nil)

  :config
  (setq ivy-re-builders-alist
        '((t . ivy--regex-ignore-order)))
  (setq ivy-wrap t)
  (ivy-mode 1))

(use-package swiper
  :bind (("M-s" . swiper)))

(use-package ivy-hydra
    :ensure t)

;; * DIRED-MODE               * -------------------------------------------------------------------------|

(setq dired-listing-switches "-aBhl --group-directories-first")

(use-package dired-async
  :ensure nil)

(use-package image-dired
  :ensure nil)

(use-package wdired
  :ensure nil)

(use-package ztree
  :ensure t)

(use-package quick-preview
  :ensure t
  :init
  (global-set-key (kbd "C-c q") 'quick-preview-at-point)
  (define-key dired-mode-map (kbd "Q") 'quick-preview-at-point))

(use-package dired-hacks-utils
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))


(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))

(use-package dired-column
  :ensure nil
  :bind (:package dired
                  :map dired-mode-map
                  ("o" . dired-column-find-file)))

(use-package dired-subtree
  :bind (:package dired
                  :map dired-mode-map
                  ("<tab>" . dired-subtree-toggle)
                  ("TAB" . dired-subtree-toggle)
                  ("<backtab>" . dired-subtree-cycle)))


(use-package dired-x
  :ensure nil
  :hook ((dired-mode . dired-omit-mode)
         (dired-mode . dired-hide-details-mode))
  :bind (("s-\\" . dired-jump-other-window)
         :package dired
         :map dired-mode-map
         (")" . dired-omit-mode)))


(use-package diredfl
  :ensure t
  :config
  (diredfl-global-mode))

(use-package dired-rainbow
  :ensure t
  :config
  (progn
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
    ))

;; * RAINBOW-DELIMITERS       * -------------------------------------------------------------------------|

(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))

;; * SMARTPARENS              * -------------------------------------------------------------------------|

(use-package smartparens
  :ensure t
  :config
  (smartparens-global-mode 1))

;; * RESTART-EMACS            * -------------------------------------------------------------------------|

(use-package restart-emacs
  :ensure t
  :bind* (("C-x M-c" . restart-emacs)))

;; * INTERACTIVE-FUNCTIONS    * -------------------------------------------------------------------------|

(defun dot-emacs ()
  "dot-emacs you can call via M-x."
  (interactive)
  (find-file "~/.emacs"))

;; * ORIGAMI                  * -------------------------------------------------------------------------|

(use-package origami
  :ensure t
  :commands (origami-toggle-node)
  :bind* (("M-m -" . orgiami-toggle-node)))

;; * VIMISH-FOLD              * -------------------------------------------------------------------------|

(use-package vimish-fold
  :ensure t
  :commands (vimish-fold-toggle
             vimish-fold))

;; * NEOTREE-MODE             * -------------------------------------------------------------------------|

(use-package neotree
  :ensure t
  :bind (("<f8>" . neotree-toggle))
  :init
  (setq neo-window-width 40)
  (setq neo-show-hidden-files t)
  (setq neo-theme 'arrow))

;; (add-hook 'neotree-mode-hook
;;               (lambda ()
;;                 (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
;;                 (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
;;                 (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
;;                 (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
;;                 (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
;;                 (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
;;                 (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
;;                 (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
;;                 (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))


 (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
    (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
    (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)


;; * WHICH-KEY                * -------------------------------------------------------------------------|

(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))

;; * USE-PACKAGE-CHORDS       * ..........................................................................

(use-package use-package-chords
    :ensure t
    :config
    (key-chord-mode 1))

;; * UNDO-TREE                * ..........................................................................

(use-package undo-tree
    :ensure t
    :chords (("uu" . undo-tree-visualize))
    :diminish undo-tree-mode:
    :config
    (global-undo-tree-mode 1))

(use-package nyan-mode
  :ensure t)

;; * PROJECTILE-MODE          * .........................................................................

;; (use-package projectile
;;   :ensure t
;;   :init
;;   (setq projectile-enable-caching t)
;;   (setq projectile-completion-system 'ivy)
;;   :config
;;   (projectile-mode))

(use-package counsel-projectile
    :ensure t
    :config
    (add-hook 'after-init-hook 'counsel-projectile-mode))

(use-package projectile
:ensure t
:config
(projectile-global-mode)
(setq projectile-completion-system 'ivy))


;; * YASNIPPET-MODE           * .........................................................................

(use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :config
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets")
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
      (yas-global-mode)
      (global-set-key (kbd "M-/") 'company-yasnippet))

;; * DUMB-JUMP                * .........................................................................

(use-package dumb-jump
  :ensure t
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g q" . dumb-jump-quick-look)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy))

(defhydra dumb-jump-hydra (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Go")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back"))

;; * DISCOVER-MY-MAJOR        * #########################################################################|

(use-package discover-my-major
  :ensure t
  :bind (("C-h C-m" . discover-my-major)
         ("C-h M-m" . discover-my-mode)))

;; * JAVASCRIPT-SETTINGS      * #########################################################################|

(use-package js2-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

(use-package tern :ensure t)

(use-package typescript-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode)))

;; LSP for JavaScript and TypeScript
;;(use-package lsp-javascript-typescript
;;  :ensure t
;;  :init
;;  (add-to-list 'js-mode-hook #'lsp-javascript-typescript-enable)
;;  (add-to-list 'typescript-mode-hook #'lsp-javascript-typescript-enable))

;; * BOOKMARKS-MODE           * #########################################################################|

(use-package bm
         :ensure t
         :demand t

         :init
         ;; restore on load (even before you require bm)
         (setq bm-restore-repository-on-load t)


         :config
         ;; Allow cross-buffer 'next'
         (setq bm-cycle-all-buffers t)

         ;; where to store persistant files
         (setq bm-repository-file "~/.emacs.d/bm-repository")

         ;; save bookmarks
         (setq-default bm-buffer-persistence t)

         ;; Loading the repository from file when on start up.
         (add-hook 'after-init-hook 'bm-repository-load)

         ;; Saving bookmarks
         (add-hook 'kill-buffer-hook #'bm-buffer-save)

         ;; Saving the repository to file when on exit.
         ;; kill-buffer-hook is not called when Emacs is killed, so we
         ;; must save all bookmarks first.
         (add-hook 'kill-emacs-hook #'(lambda nil
                                          (bm-buffer-save-all)
                                          (bm-repository-save)))

         ;; The `after-save-hook' is not necessary to use to achieve persistence,
         ;; but it makes the bookmark data in repository more in sync with the file
         ;; state.
         (add-hook 'after-save-hook #'bm-buffer-save)

         ;; Restoring bookmarks
         (add-hook 'find-file-hooks   #'bm-buffer-restore)
         (add-hook 'after-revert-hook #'bm-buffer-restore)

         ;; The `after-revert-hook' is not necessary to use to achieve persistence,
         ;; but it makes the bookmark data in repository more in sync with the file
         ;; state. This hook might cause trouble when using packages
         ;; that automatically reverts the buffer (like vc after a check-in).
         ;; This can easily be avoided if the package provides a hook that is
         ;; called before the buffer is reverted (like `vc-before-checkin-hook').
         ;; Then new bookmarks can be saved before the buffer is reverted.
         ;; Make sure bookmarks is saved before check-in (and revert-buffer)
         (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

         :bind (("<f2>" . bm-next)
                ("S-<f2>" . bm-previous)
                ("C-<f2>" . bm-toggle)))

;; * PDF-TOOLS                * #########################################################################|

;; (use-package pdf-view
;;   :ensure nil
;;   :after pdf-tools
;;   :bind (:map pdf-view-mode-map
;;         ("C-s" . isearch-forward))
;;   :custom (pdf-view-use-unicode-ligther nil))

;; * NOTHING-BELOW-THIS-POINT * #########################################################################|


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (doom-one)))
 '(custom-safe-themes
   (quote
    ("6b2636879127bf6124ce541b1b2824800afc49c6ccd65439d6eb987dbf200c36" default)))
 '(package-selected-packages
   (quote
    (powerline smartparens restart-emacs rainbow-delimiters quelpa-use-package outshine doom-themes doom-modeline dired-narrow counsel))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
