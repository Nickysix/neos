* The Process

** 1. Express how you wish to represent information as data, A one-line comment suffices:

   ; We use numbers to represent centimeters

** 2. Write down a signature, a purpose statement and a function header.

*** A function signature is a comment that tells the readers of your desing:
    - How many inputs
    - to which classes do the inputs belong
    - What kind of result does it produce

    ; String -> Number
    ; Temperature -> String
    ; Number String Image -> Image

*** A purpose statement is comment that summarizes the purpose of the function
    in a single line
    - what does the function compute?
    - A multi-function program should come with a purpose statement

*** Header (stub) is a function definitions with one parameter for each input,
    the body of the function can be any data (simple) of the output class
    - it is often useful to employ the parameter names to clarify what is computed.

; Number String Image -> Image 
; adds s to img,
; y pixels from the top and 10 from the left 
(define (add-image y s img)
  (empty-scene 100 100))

** 3. Illustrate the signature and the purpose statement with some examples.

; Number -> Number
; computes the area of a square with side len 
; given: 2, expect: 4
; given: 7, expect: 49
(define (area-of-square len) 0)

** 4. Take inventory of the givens and what we need to compute
   - This step produces a function template. (could be part of the data-definitons)

(define (area-of-square len) ; template
   (... len ...))

** 5. Now it's time to code:
; Number -> Number
; computes the area of a square with side len 
; given: 2, expect: 4
; given: 7, expect: 49
(define (area-of-square len)
  (sqr len))

** 6. Test the function on the given examples

* The wish list
** Each entry on a wish list should consist of three things:
   - a meaningful name for the function
   - a signature
   - a purpose statement.

* World Programs

** Signatures of world programs - 3.6
; WorldState: a data definition for a class of data that
; represents the state of the world (cw)

; render: WorldState -> Image
; when needed, big-bang obtains the image of the current
; state of the world by evaluating (render cw)

; clock-tick-handler: WorldState -> WorldState
; for each tick of the clock, big-bang obtains the next
; state of the world from (clock-tick-handler cw)

; key-stroke-handler: WorldState String -> WorldState
; for each key stroke, big-bang obtains the next stat
; from (key-stroke-handler cw ke) where ke is the key
; stroke to obtain the new world state

; mouse-event-handler:
;   WorldState Number Number String -> WorldState
; for each mouse gesture, big-bang obtains the next state
; from (mouse-event-handler cw x y me) where x and y are
; the coordinates of the event and me is its description

; end?: WorldState -> Boolean
; when needed, big-bang evaluates (end? cw) to determine
; whether the program should stop

** Design Recipe for Worlds
*** Define unchanging propertes
       For all those properties of the world that remain the same over time
         and are needed to render it as an Image, introduce constants. In BSL,
         we specify such constants via definitions. For the purpose of world
         programs, we distinguish between two kinds of constants:

       “Physical” constants describe general attributes of objects in the world,
          such as the speed or velocity of an object, its color, its height,
          its width, its radius, and so forth. Of course these constants don’t
          really refer to physical facts, but many are analogous to physical
          aspects of the real world.

        In the context of our sample problem, the radius of the car’s wheels and
          the distance between the wheels are such “physical” constants:

            (define WIDTH-OF-WORLD 200)

            (define WHEEL-RADIUS 5)
            (define WHEEL-DISTANCE (* WHEEL-RADIUS 5))

        Note how the second constant is computed from the first.

        - Graphical constants are images of objects in the world. The program
           composes them into images that represent the complete state
        of the world.

        Here are graphical constants for wheel images of our sample car:

            (define WHEEL
              (circle WHEEL-RADIUS "solid" "black"))
            We suggest you experiment in DrRacket’s interaction area to develop
              such graphical constants.
            (define SPACE
              (rectangle ... WHEEL-RADIUS ... "white"))
            (define BOTH-WHEELS
              (beside WHEEL SPACE WHEEL))

        Graphical constants are usually computed, and the computations tend to
          involve physical constants and other images.

    It is good practice to annotate constant definitions with a comment that
      explains what they mean.

*** Define the world state
    Those properties that change over time—in reaction to clock ticks,
      key strokes, or mouse actions—give rise to the current state of
      the world. Your task is to develop a data representation for all
      possible states of the world. The development results in a data
      definition, which comes with a comment that tells readers how to
      represent world information as data and how to interpret data as
      information about the world.

    Choose simple forms of data to represent the state of the world.

    For the running example, it is the car’s distance to the left margin that
      changes over time. While the distance to the right margin changes, too,
      it is obvious that we need only one or the other to create an image. A
      distance is measured in numbers, so the following is an adequate
      data definition:

        ; A WorldState is a Number.
        ; interpretation the number of pixels between
        ; the left border of the scene and the car

    An alternative is to count the number of clock ticks that have passed and
      to use this number as the state of the world. We leave this design
      variant as an exercise.

*** Design the functions
   Once you have a data representation for the state of the world, you need
     to design a number of functions so that you can form a valid big-bang
     expression.

    To start with, you need a function that maps any given state into an image
    so that big-bang can render the sequence of states as images:

        ; render

    Next you need to decide which kind of events should change which aspects of
      the world state. Depending on your decisions, you need to design some or
      all of the following three functions:

        ; clock-tick-handler
        ; key-stroke-handler
        ; mouse-event-handler

*** Define a main function
    Finally, if the problem statement suggests that the program should stop if
      the world has certain properties, you must design

        ; end?

    For the generic signatures and purpose statements of these functions,
      see figure 21. Adapt these generic purpose statements to the particular
      problems you solve, so that readers know what they compute.

    In short, the desire to design an interactive program automatically creates
      several initial entries for your wish list. Work them off one by one and
      you get a complete world program.

* conditionals

(define (next traffic-light-state)
  (cond
    [(string=? "red" traffic-light-state) "green"]
    [(string=? "green" traffic-light-state) "yellow"]
    [(string=? "yellow" traffic-light-state) "red"]))

    always use cond for situations when we wish to remind the reader of our code
    that some distinct situations come directly from data definitions.

** else expression
(cond
  [ConditionExpression1 ResultExpression1]
  [ConditionExpression2 ResultExpression2]
  ....
  [else DefaultResultExpression])

* Revised recipe for ,,, section 4-6 Itemizations

** 1. Data definition
    When the problem statement distinguishes different classes of input
     information, you need carefully formulated data definitions.

    A data definition must use distinct clauses for each sub-classes of data
      or in some cases just individual pieces of data. Each clause specifies
      a data representation for a particular sub-class of information. The key
      is that each sub-class of data is distinct from every other class so that
      our function can proceed by analyzing disjoint cases.

    Our sample problem deals with prices and taxes, which are usually positive
      numbers. It also clearly distinguishes three ranges:

        ; A Price falls into one of three intervals:
        ; — 0 through 1000
        ; — 1000 through 10000
        ; — 10000 and above.
        ; interpretation the price of an item

    Do you understand how these ranges relate to the original problem?

** 2. signature, a purpose statement and a function header.
   As far as the signature, purpose statement, and function header are
     concerned, you proceed as before.

   Here is the material for our running example:

        ; Price -> Number
        ; computes the amount of tax charged for p
        (define (sales-tax p) 0)

** 3. Examples
   For functional examples, however, it is imperative that you pick at least one
     example from each sub-class in the data definition. Also, if a sub-class
     is a finite range, be sure to pick examples from the boundaries of the
     range and from its interior.

    Since our sample data definition involves three distinct intervals, let
      us pick all boundary examples and one price from inside each interval and
      determine the amount of tax for each: 0, 537, 1000, 1282, 10000, and 12017.

    Here is our first attempt, with rounded tax amounts:

    0    537 1000 1282 1000 12017
    0      0 ????   64 ????   961

    The question marks point out that the problem statement uses the somewhat
      vague phrase “those costing less than $1,000” and “more than $10,000” to
      specify the tax table. While a programmer may immediately jump to the
      conclusion that these words mean “strictly less” or “strictly more,”
      the lawmakers may have meant to say “less or equal” or “more or equal,”
      respectively. Being skeptical, we decide here that Tax Land legislators
      always want more money to spend, so the tax rate for $1,000 is 5% and
      the rate for $10,000 is 8%. A programmer at a tax company would have to
      ask a tax-law specialist.

    Now that we have figured out how the boundaries are to be interpreted in
      the domain, we could refine the data definition. We trust you can do
      this on your own.

    Before we go, let us turn some of the examples into test cases:

        (check-expect (sales-tax 537) 0)
        (check-expect (sales-tax 1000) (* 0.05 1000))
        (check-expect (sales-tax 12017) (* 0.08 12017))

    Take a close look. Instead of just writing down the expected result, we
       write down how to compute the expected result. This makes it easier
       later to formulate the function definition.

    Stop! Write down the remaining test cases. Think about why you may need
      more test cases than sub-classes in the data definition.

** 4. Inventory and templates
   The biggest novelty is the conditional template. In general,

        the template mirrors the organization of sub-classes with a cond.

   This slogan means two concrete things. First, the function’s body must be
     a conditional expression with as many clauses as there are distinct sub
     -classes in the data definition. If the data definition mentions three
     distinct sub-classes of input data, you need three cond clauses; if it has
     seventeen sub-classes, the cond expression contains seventeen clauses.
     Second, you must formulate one condition expression per cond clause. Each
     expression involves the function parameter and identifies one of the sub
     -classes of data in the data definition:

        (define (sales-tax p)
          (cond
            [(and (<= 0 p) (< p 1000)) ...]
            [(and (<= 1000 p) (< p 10000)) ...]
            [(>= p 10000) ...]))

** 5. Coding
   When you have finished the template, you are ready to define the function.
     Given that the function body already contains a schematic cond expression,
     it is natural to start from the various cond lines. For each cond line,
     you may assume that the input parameter meets the condition and you
     exploit the corresponding test cases. To formulate the corresponding
     result expression, you write down the computation for this example as an
     expression that involves the function parameter. Ignore all other possible
     kinds of input data when you work on one line; the other cond clauses
     take care of those.

        (define (sales-tax p)
          (cond
            [(and (<= 0 p) (< p 1000)) 0]
            [(and (<= 1000 p) (< p 10000)) (* 0.05 p)]
            [(>= p 10000) (* 0.08 p)]))

** 6. Writing tests
    Finally, run the tests and ensure that they cover all cond clauses.

    What do you do when one of your test cases fails? Review at the end
    of Designing Functions concerning test failures.

* Nested Structures
  If a function deals with nested structures, develop one function per level of nesting.
