#lang htdp/bsl
(require 2htdp/image)
(require 2htdp/universe)

;; Exercise 95. Explain why the three instances are generated according to the
;; first or second clause of the data definition.
;; > See line 33.


;; Structure type definitions

;; the time period when the player is trying to get the tank in position for a shot
(define-struct aim [ufo tank])

;; represents states after the missile is fired
(define-struct fired [ufo tank missile])

; A UFO is Posn.
; interpretation (make-posn x y) is the UFO's current location

(define-struct tank [loc vel])
; A Tank is (make-tank Number Number).
; interpretation (make-tank x dx) means the tank is at position
; (x, HEIGHT) and that it moves dx pixels per clock tick

; A Missile is Posn.
; interpretation (make-posn x y) is the missile's current location

; A SIGS is one of:
; – (make-aim UFO Tank)
; – (make-fired UFO Tank Missile)
; interpretation represents the state of the space invader game

;; tank instance: maneuvering into position to fire the missile
(make-aim (make-posn 20 10) (make-tank 28 -3))
;; this instance is generated by the rule for aim-ufo, which calls for a Posn, and
;; aim-tank, which calls for a Tank. The aim Posn is represented by two numbers for
;; x and y, and a Tank is represented by two numbers for its location and velocity.

;; just like the previous one but the missile has been fired:
(make-fired (make-posn 20 10)
            (make-tank 28 -3)
            (make-posn 28 (- HEIGHT TANK-HEIGHT )))
;; an instance of the fired state calls for a ufo Posn, a tank instance, and a
;; Posn for the missile.

;; Finally, here is one where the missile is close enough to the UFO for a collision:
(make-fired (make-posn 20 100)
            (make-tank 100 3)
            (make-posn 22 103))
